package com.lyl.calendar;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lyl.calendar.OverTime;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OVER_TIME".
*/
public class OverTimeDao extends AbstractDao<OverTime, Long> {

    public static final String TABLENAME = "OVER_TIME";

    /**
     * Properties of entity OverTime.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Count = new Property(1, int.class, "count", false, "COUNT");
        public final static Property Cur_month = new Property(2, String.class, "cur_month", false, "CUR_MONTH");
        public final static Property StartTime = new Property(3, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(4, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property Date = new Property(5, java.util.Date.class, "date", false, "DATE");
    };


    public OverTimeDao(DaoConfig config) {
        super(config);
    }
    
    public OverTimeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OVER_TIME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COUNT\" INTEGER NOT NULL ," + // 1: count
                "\"CUR_MONTH\" TEXT NOT NULL ," + // 2: cur_month
                "\"START_TIME\" INTEGER," + // 3: startTime
                "\"END_TIME\" INTEGER," + // 4: endTime
                "\"DATE\" INTEGER NOT NULL );"); // 5: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OVER_TIME\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OverTime entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCount());
        stmt.bindString(3, entity.getCur_month());
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(4, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(5, endTime.getTime());
        }
        stmt.bindLong(6, entity.getDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OverTime readEntity(Cursor cursor, int offset) {
        OverTime entity = new OverTime( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // count
            cursor.getString(offset + 2), // cur_month
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // startTime
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // endTime
            new java.util.Date(cursor.getLong(offset + 5)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OverTime entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCount(cursor.getInt(offset + 1));
        entity.setCur_month(cursor.getString(offset + 2));
        entity.setStartTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDate(new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OverTime entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OverTime entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
